{
  "name": "VAULT MK8 - Advanced Multi-Agent Command Processor",
  "description": "Intelligent Turkish/English command processor with multi-agent routing and context management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "vault-mk8-command",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true,
          "allowedOrigins": "*"
        }
      },
      "id": "b8c2e4f1-1234-4567-8901-234567890123",
      "name": "üéØ Command Input Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [20, 300],
      "webhookId": "vault-mk8-entry"
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - Advanced Command Processor & Language Detection\nconst inputData = $input.all();\nconst command = inputData[0]?.json?.command || inputData[0]?.json?.body?.command || '';\nconst userId = inputData[0]?.json?.userId || 'anonymous';\nconst sessionId = inputData[0]?.json?.sessionId || Date.now().toString();\n\n// Language Detection Patterns\nconst turkishPatterns = {\n  browser: ['google', 'ara', 'arama', 'git', 'web', 'site', 'a√ßar', 'gir', 'bul', 'tarama'],\n  system: ['kapat', 'a√ß', '√ßalƒ±≈ütƒ±r', 'durdur', 'listele', 'sistem', 'process', 'kill', 'ba≈ülat'],\n  file: ['dosya', 'klas√∂r', 'olu≈ütur', 'sil', 'kopyala', 'ta≈üƒ±', 'yaz', 'oku', 'kaydet'],\n  ai: ['yaz', 'analiz', '√ßevir', '√∂zetle', 'sor', 'anlat', 'a√ßƒ±kla', 'deƒüerlendir'],\n  api: ['istek', 'veri', 'g√∂nder', 'al', 'api', 'webhook', 'servis'],\n  database: ['veritabanƒ±', 'kayƒ±t', 'sorgula', 'g√ºncelle', 'ekle', 'db'],\n  chitchat: ['selam', 'merhaba', 'g√ºnaydƒ±n', 'iyi g√ºnler', 'nasƒ±lsƒ±n', 'naber', 'iyi misin', 'te≈üekk√ºr', 'saƒüol', 'ho≈ü√ßa kal', 'g√∂r√º≈ü√ºr√ºz', 'iyi geceler']\n};\n\nconst englishPatterns = {\n  browser: ['google', 'search', 'navigate', 'open', 'visit', 'scrape', 'browser', 'web'],\n  system: ['run', 'execute', 'kill', 'stop', 'start', 'list', 'process', 'system'],\n  file: ['file', 'folder', 'create', 'delete', 'copy', 'move', 'write', 'read', 'save'],\n  ai: ['write', 'analyze', 'translate', 'summarize', 'explain', 'generate', 'ask'],\n  api: ['request', 'fetch', 'send', 'get', 'post', 'api', 'webhook', 'service'],\n  database: ['database', 'query', 'insert', 'update', 'select', 'db', 'record'],\n  chitchat: ['hello', 'hi', 'good morning', 'good day', 'how are you', 'howdy', 'thanks', 'thank you', 'bye', 'goodbye', 'good night']\n};\n\n// Advanced Command Analysis\nfunction analyzeCommand(cmd) {\n  const lowerCmd = cmd.toLowerCase();\n  const words = lowerCmd.split(/\\s+/);\n  \n  // Language detection\n  let turkishScore = 0;\n  let englishScore = 0;\n  \n  words.forEach(word => {\n    Object.values(turkishPatterns).flat().forEach(pattern => {\n      if (word.includes(pattern)) turkishScore++;\n    });\n    Object.values(englishPatterns).flat().forEach(pattern => {\n      if (word.includes(pattern)) englishScore++;\n    });\n  });\n  \n  const detectedLanguage = turkishScore > englishScore ? 'turkish' : 'english';\n  const patterns = detectedLanguage === 'turkish' ? turkishPatterns : englishPatterns;\n  \n  // Agent scoring\n  const agentScores = {};\n  Object.keys(patterns).forEach(agent => {\n    agentScores[agent] = 0;\n    patterns[agent].forEach(pattern => {\n      if (lowerCmd.includes(pattern)) {\n        agentScores[agent] += pattern.length; // Longer matches get higher scores\n      }\n    });\n  });\n  \n  // Find best matching agent\n  const bestAgent = Object.keys(agentScores).reduce((a, b) => \n    agentScores[a] > agentScores[b] ? a : b\n  );\n  \n  // Extract parameters\n  const urlMatch = cmd.match(/https?:\\/\\/[^\\s]+/);\n  const fileMatch = cmd.match(/[\\w\\-. ]+\\.(txt|json|csv|pdf|doc|xlsx?)/);\n  const processMatch = cmd.match(/\"([^\"]+)\"|'([^']+)'|\\b([A-Za-z0-9_\\-]+\\.(exe|app|py|js))\\b/);\n  \n  return {\n    originalCommand: cmd,\n    detectedLanguage,\n    primaryAgent: bestAgent,\n    confidence: Math.max(...Object.values(agentScores)) / words.length,\n    parameters: {\n      url: urlMatch ? urlMatch[0] : null,\n      filename: fileMatch ? fileMatch[0] : null,\n      process: processMatch ? (processMatch[1] || processMatch[2] || processMatch[3]) : null,\n      searchQuery: bestAgent === 'browser' ? cmd.replace(/google|ara|search/gi, '').trim() : null\n    },\n    agentScores,\n    timestamp: new Date().toISOString(),\n    sessionId,\n    userId\n  };\n}\n\n// Process the command\nconst analysis = analyzeCommand(command);\n\n// Prepare execution context\nconst executionContext = {\n  ...analysis,\n  executionId: `exec_${Date.now()}`,\n  status: 'routing',\n  metadata: {\n    processingTime: Date.now(),\n    version: 'MK8',\n    workflow: 'multi-agent-processor'\n  }\n};\n\n// Log for monitoring\nconsole.log(`VAULT MK8 - Command Analysis:`, {\n  command: analysis.originalCommand,\n  agent: analysis.primaryAgent,\n  language: analysis.detectedLanguage,\n  confidence: analysis.confidence\n});\n\nreturn [executionContext];"
      },
      "id": "a1b2c3d4-2345-5678-9012-345678901234",
      "name": "üß† Intelligent Command Analyzer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "browser_condition",
              "leftValue": "={{ $json.primaryAgent }}",
              "rightValue": "browser",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "system_condition", 
              "leftValue": "={{ $json.primaryAgent }}",
              "rightValue": "system",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "ai_condition",
              "leftValue": "={{ $json.primaryAgent }}",
              "rightValue": "ai", 
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "file_condition",
              "leftValue": "={{ $json.primaryAgent }}",
              "rightValue": "file",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "api_condition",
              "leftValue": "={{ $json.primaryAgent }}",
              "rightValue": "api",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "chitchat_condition",
              "leftValue": "={{ $json.primaryAgent }}",
              "rightValue": "chitchat",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "fallbackOutput": "extra"
      },
      "id": "c3d4e5f6-3456-6789-0123-456789012345",
      "name": "üéØ Agent Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - Browser Agent Logic\nconst context = $input.all()[0].json;\nconst { originalCommand, parameters, detectedLanguage } = context;\n\n// Browser automation logic\nconst browserActions = {\n  search: async (query, url = null) => {\n    const searchUrl = url || `https://www.google.com/search?q=${encodeURIComponent(query)}`;\n    return {\n      action: 'navigate_and_search',\n      url: searchUrl,\n      query: query,\n      waitFor: 'div#search',\n      extractData: ['titles', 'links', 'descriptions']\n    };\n  },\n  navigate: async (url) => {\n    return {\n      action: 'navigate',\n      url: url,\n      waitFor: 'body',\n      screenshot: true\n    };\n  },\n  scrape: async (url, selectors = []) => {\n    return {\n      action: 'scrape_data',\n      url: url,\n      selectors: selectors.length ? selectors : ['h1', 'h2', 'p', 'a'],\n      format: 'json'\n    };\n  }\n};\n\n// Determine browser action\nlet browserCommand;\nif (parameters.url) {\n  if (originalCommand.includes('ara') || originalCommand.includes('search')) {\n    browserCommand = browserActions.search(parameters.searchQuery, parameters.url);\n  } else {\n    browserCommand = browserActions.navigate(parameters.url);\n  }\n} else if (parameters.searchQuery) {\n  browserCommand = browserActions.search(parameters.searchQuery);\n} else {\n  // Fallback: treat entire command as search query\n  const cleanQuery = originalCommand.replace(/google|ara|search|git|web/gi, '').trim();\n  browserCommand = browserActions.search(cleanQuery);\n}\n\nconst result = {\n  ...context,\n  agentType: 'browser',\n  status: 'executing',\n  execution: {\n    command: await browserCommand,\n    estimatedTime: '5-15 seconds',\n    requirements: ['selenium', 'chromedriver'],\n    safety: 'user_content_filtering'\n  },\n  response: {\n    type: 'browser_automation',\n    message: detectedLanguage === 'turkish' \n      ? `Tarayƒ±cƒ± komutu i≈üleniyor: ${originalCommand}`\n      : `Processing browser command: ${originalCommand}`,\n    data: await browserCommand\n  }\n};\n\nconsole.log('VAULT MK8 - Browser Agent Execution:', result.execution.command);\nreturn [result];"
      },
      "id": "d4e5f6g7-4567-7890-1234-567890123456",
      "name": "üåê Browser Agent Executor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 100]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - System Agent Logic\nconst context = $input.all()[0].json;\nconst { originalCommand, parameters, detectedLanguage } = context;\n\n// System command mappings\nconst systemCommands = {\n  // Turkish commands\n  'kapat': (process) => ({ action: 'kill', target: process, signal: 'SIGTERM' }),\n  'a√ß': (app) => ({ action: 'start', target: app, wait: false }),\n  '√ßalƒ±≈ütƒ±r': (cmd) => ({ action: 'execute', command: cmd, shell: true }),\n  'listele': (type) => ({ action: 'list', type: type || 'processes' }),\n  \n  // English commands\n  'kill': (process) => ({ action: 'kill', target: process, signal: 'SIGTERM' }),\n  'start': (app) => ({ action: 'start', target: app, wait: false }),\n  'run': (cmd) => ({ action: 'execute', command: cmd, shell: true }),\n  'list': (type) => ({ action: 'list', type: type || 'processes' }),\n  'stop': (service) => ({ action: 'stop', target: service }),\n  'execute': (cmd) => ({ action: 'execute', command: cmd, shell: true })\n};\n\n// Parse system command\nfunction parseSystemCommand(cmd) {\n  const words = cmd.toLowerCase().split(/\\s+/);\n  const action = words.find(word => Object.keys(systemCommands).includes(word));\n  \n  if (!action) {\n    return {\n      action: 'execute',\n      command: cmd,\n      shell: true,\n      warning: 'Direct command execution - use with caution'\n    };\n  }\n  \n  const target = parameters.process || words.slice(words.indexOf(action) + 1).join(' ');\n  return systemCommands[action](target);\n}\n\nconst systemExecution = parseSystemCommand(originalCommand);\n\n// Security validation\nconst dangerousCommands = ['rm -rf', 'del /f', 'format', 'shutdown', 'reboot'];\nconst isDangerous = dangerousCommands.some(dangerous => \n  originalCommand.toLowerCase().includes(dangerous)\n);\n\nconst result = {\n  ...context,\n  agentType: 'system',\n  status: isDangerous ? 'blocked' : 'executing',\n  execution: {\n    command: systemExecution,\n    estimatedTime: '1-5 seconds',\n    requirements: ['system_permissions'],\n    safety: isDangerous ? 'BLOCKED - Dangerous command detected' : 'validated',\n    platform: process.platform\n  },\n  response: {\n    type: 'system_command',\n    message: detectedLanguage === 'turkish'\n      ? isDangerous \n        ? `G√ºvenlik nedeniyle engellendi: ${originalCommand}`\n        : `Sistem komutu i≈üleniyor: ${originalCommand}`\n      : isDangerous\n        ? `Blocked for security: ${originalCommand}`\n        : `Processing system command: ${originalCommand}`,\n    data: systemExecution,\n    warning: isDangerous ? 'Command blocked by security policy' : null\n  }\n};\n\nconsole.log('VAULT MK8 - System Agent Execution:', result.execution);\nreturn [result];"
      },
      "id": "e5f6g7h8-5678-8901-2345-678901234567",
      "name": "‚öôÔ∏è System Agent Executor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - AI Agent Logic with Gemini Integration\nconst context = $input.all()[0].json;\nconst { originalCommand, detectedLanguage } = context;\n\n// AI task classification\nconst aiTasks = {\n  // Turkish patterns\n  'yaz': 'generate_text',\n  'analiz': 'analyze_content', \n  '√ßevir': 'translate',\n  '√∂zetle': 'summarize',\n  'sor': 'question_answer',\n  'anlat': 'explain',\n  'a√ßƒ±kla': 'explain',\n  \n  // English patterns\n  'write': 'generate_text',\n  'analyze': 'analyze_content',\n  'translate': 'translate', \n  'summarize': 'summarize',\n  'ask': 'question_answer',\n  'explain': 'explain',\n  'generate': 'generate_text',\n  'create': 'generate_text'\n};\n\n// Determine AI task\nfunction classifyAITask(cmd) {\n  const words = cmd.toLowerCase().split(/\\s+/);\n  const taskType = words.find(word => Object.keys(aiTasks).includes(word));\n  return aiTasks[taskType] || 'general_query';\n}\n\nconst taskType = classifyAITask(originalCommand);\n\n// Prepare AI prompt based on task and language\nfunction buildPrompt(command, task, language) {\n  const prompts = {\n    turkish: {\n      generate_text: `L√ºtfen ≈üu konuda detaylƒ± bir metin yaz: ${command}`,\n      analyze_content: `≈ûu i√ßeriƒüi analiz et ve deƒüerlendir: ${command}`,\n      translate: `≈ûu metni ƒ∞ngilizce'ye √ßevir: ${command}`,\n      summarize: `≈ûu metni √∂zetle: ${command}`,\n      question_answer: `≈ûu soruyu yanƒ±tla: ${command}`,\n      explain: `≈ûunu a√ßƒ±kla: ${command}`,\n      general_query: `${command}`\n    },\n    english: {\n      generate_text: `Please write detailed content about: ${command}`,\n      analyze_content: `Analyze and evaluate the following: ${command}`,\n      translate: `Translate the following to Turkish: ${command}`,\n      summarize: `Summarize the following: ${command}`,\n      question_answer: `Answer this question: ${command}`,\n      explain: `Explain the following: ${command}`,\n      general_query: `${command}`\n    }\n  };\n  \n  return prompts[language][task] || prompts[language]['general_query'];\n}\n\nconst aiPrompt = buildPrompt(originalCommand, taskType, detectedLanguage);\n\n// Prepare AI execution context\nconst aiExecution = {\n  provider: 'gemini', // Default to Gemini\n  model: 'gemini-pro',\n  prompt: aiPrompt,\n  parameters: {\n    temperature: 0.7,\n    max_tokens: 2048,\n    top_p: 0.9\n  },\n  task_type: taskType,\n  response_language: detectedLanguage\n};\n\nconst result = {\n  ...context,\n  agentType: 'ai',\n  status: 'executing',\n  execution: {\n    command: aiExecution,\n    estimatedTime: '10-30 seconds',\n    requirements: ['gemini_api_key'],\n    safety: 'content_filtering_enabled'\n  },\n  response: {\n    type: 'ai_generation',\n    message: detectedLanguage === 'turkish'\n      ? `AI g√∂revi i≈üleniyor: ${taskType} - ${originalCommand}`\n      : `Processing AI task: ${taskType} - ${originalCommand}`,\n    data: aiExecution\n  }\n};\n\nconsole.log('VAULT MK8 - AI Agent Execution:', result.execution.command);\nreturn [result];"
      },
      "id": "f6g7h8i9-6789-9012-3456-789012345678",
      "name": "ü§ñ AI Agent Executor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - File Agent Logic\nconst context = $input.all()[0].json;\nconst { originalCommand, parameters, detectedLanguage } = context;\n\n// File operation mappings\nconst fileOperations = {\n  // Turkish\n  'olu≈ütur': 'create',\n  'sil': 'delete', \n  'kopyala': 'copy',\n  'ta≈üƒ±': 'move',\n  'yaz': 'write',\n  'oku': 'read',\n  'kaydet': 'save',\n  'dosya': 'file',\n  'klas√∂r': 'directory',\n  \n  // English\n  'create': 'create',\n  'delete': 'delete',\n  'copy': 'copy', \n  'move': 'move',\n  'write': 'write',\n  'read': 'read',\n  'save': 'save',\n  'file': 'file',\n  'folder': 'directory'\n};\n\n// Parse file command\nfunction parseFileCommand(cmd) {\n  const words = cmd.toLowerCase().split(/\\s+/);\n  const operation = words.find(word => Object.keys(fileOperations).includes(word));\n  const mappedOp = fileOperations[operation] || 'read';\n  \n  // Extract file path/name\n  const filename = parameters.filename || \n    words.find(word => word.includes('.')) ||\n    words.slice(-1)[0]; // Last word as fallback\n  \n  return {\n    operation: mappedOp,\n    target: filename,\n    source: operation === 'copy' || operation === 'move' ? words[words.indexOf(operation) + 1] : null,\n    destination: operation === 'copy' || operation === 'move' ? words[words.indexOf(operation) + 2] : null,\n    content: mappedOp === 'write' ? words.slice(words.indexOf(operation) + 2).join(' ') : null\n  };\n}\n\nconst fileCommand = parseFileCommand(originalCommand);\n\n// File safety validation\nconst safeExtensions = ['.txt', '.json', '.csv', '.md', '.log', '.xml', '.yaml', '.yml'];\nconst dangerousOperations = ['delete', 'move'];\nconst isSafe = !dangerousOperations.includes(fileCommand.operation) || \n  safeExtensions.some(ext => fileCommand.target?.includes(ext));\n\nconst result = {\n  ...context,\n  agentType: 'file',\n  status: isSafe ? 'executing' : 'requires_confirmation',\n  execution: {\n    command: fileCommand,\n    estimatedTime: '1-3 seconds',\n    requirements: ['file_system_access'],\n    safety: isSafe ? 'validated' : 'requires_user_confirmation',\n    backup: dangerousOperations.includes(fileCommand.operation)\n  },\n  response: {\n    type: 'file_operation',\n    message: detectedLanguage === 'turkish'\n      ? `Dosya i≈ülemi: ${fileCommand.operation} - ${fileCommand.target}`\n      : `File operation: ${fileCommand.operation} - ${fileCommand.target}`,\n    data: fileCommand,\n    warning: !isSafe ? 'Potentially destructive operation - confirmation required' : null\n  }\n};\n\nconsole.log('VAULT MK8 - File Agent Execution:', result.execution.command);\nreturn [result];"
      },
      "id": "g7h8i9j0-7890-0123-4567-890123456789",
      "name": "üìÅ File Agent Executor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - API Agent Logic\nconst context = $input.all()[0].json;\nconst { originalCommand, parameters, detectedLanguage } = context;\n\n// API operation patterns\nconst apiOperations = {\n  // Turkish\n  'istek': 'request',\n  'g√∂nder': 'post',\n  'al': 'get',\n  'veri': 'data',\n  \n  // English  \n  'request': 'request',\n  'fetch': 'get',\n  'send': 'post',\n  'get': 'get',\n  'post': 'post',\n  'put': 'put',\n  'delete': 'delete'\n};\n\n// Parse API command\nfunction parseAPICommand(cmd) {\n  const words = cmd.toLowerCase().split(/\\s+/);\n  const operation = words.find(word => Object.keys(apiOperations).includes(word));\n  const method = apiOperations[operation] || 'get';\n  \n  // Extract URL\n  const url = parameters.url || \n    words.find(word => word.startsWith('http')) ||\n    words.find(word => word.includes('.com') || word.includes('.org') || word.includes('.net'));\n  \n  return {\n    method: method.toUpperCase(),\n    url: url,\n    headers: {\n      'Content-Type': 'application/json',\n      'User-Agent': 'VAULT-MK8-Agent/1.0'\n    },\n    timeout: 30000,\n    validateSSL: true\n  };\n}\n\nconst apiCommand = parseAPICommand(originalCommand);\n\n// API safety validation\nconst isValidUrl = apiCommand.url && \n  (apiCommand.url.startsWith('http://') || apiCommand.url.startsWith('https://'));\n\nconst result = {\n  ...context,\n  agentType: 'api',\n  status: isValidUrl ? 'executing' : 'error',\n  execution: {\n    command: apiCommand,\n    estimatedTime: '5-30 seconds',\n    requirements: ['network_access'],\n    safety: 'url_validation_enabled'\n  },\n  response: {\n    type: 'api_request',\n    message: detectedLanguage === 'turkish'\n      ? isValidUrl \n        ? `API isteƒüi i≈üleniyor: ${apiCommand.method} ${apiCommand.url}`\n        : `Ge√ßersiz URL: ${originalCommand}`\n      : isValidUrl\n        ? `Processing API request: ${apiCommand.method} ${apiCommand.url}`\n        : `Invalid URL: ${originalCommand}`,\n    data: apiCommand,\n    error: !isValidUrl ? 'Valid URL required for API operations' : null\n  }\n};\n\nconsole.log('VAULT MK8 - API Agent Execution:', result.execution.command);\nreturn [result];"
      },
      "id": "h8i9j0k1-8901-1234-5678-901234567890",
      "name": "üîó API Agent Executor", 
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - Database Agent Logic (Fallback)\nconst context = $input.all()[0].json;\nconst { originalCommand, detectedLanguage } = context;\n\n// Database operation patterns\nconst dbOperations = {\n  // Turkish\n  'veritabanƒ±': 'database',\n  'kayƒ±t': 'record',\n  'sorgula': 'query',\n  'g√ºncelle': 'update',\n  'ekle': 'insert',\n  \n  // English\n  'database': 'database',\n  'query': 'query', \n  'select': 'select',\n  'insert': 'insert',\n  'update': 'update',\n  'delete': 'delete'\n};\n\nconst result = {\n  ...context,\n  agentType: 'database',\n  status: 'not_implemented',\n  execution: {\n    command: 'database_operations_placeholder',\n    estimatedTime: 'N/A',\n    requirements: ['database_connection'],\n    safety: 'not_configured'\n  },\n  response: {\n    type: 'database_operation',\n    message: detectedLanguage === 'turkish'\n      ? `Veritabanƒ± i≈ülemleri hen√ºz yapƒ±landƒ±rƒ±lmamƒ±≈ü: ${originalCommand}`\n      : `Database operations not yet configured: ${originalCommand}`,\n    data: null,\n    note: 'Database agent requires additional configuration'\n  }\n};\n\nconsole.log('VAULT MK8 - Database Agent (Not Implemented):', result);\nreturn [result];"
      },
      "id": "i9j0k1l2-9012-2345-6789-012345678901",
      "name": "üóÑÔ∏è Database Agent (Placeholder)", 
      "type": "n8n-nodes-base.code", 
      "typeVersion": 1,
      "position": [680, 600]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - Chit-Chat Agent Logic\nconst context = $input.all()[0].json;\nconst { originalCommand, detectedLanguage } = context;\n\n// Chit-chat response patterns\nconst chitchatResponses = {\n  turkish: {\n    greetings: [\n      'Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim?',\n      'Selam! VAULT MK8 sistemine ho≈ü geldiniz!',\n      'G√ºnaydƒ±n! Bug√ºn size nasƒ±l yardƒ±mcƒ± olabilirim?',\n      'ƒ∞yi g√ºnler! Sistem hazƒ±r ve bekliyor.'\n    ],\n    how_are_you: [\n      'ƒ∞yiyim, te≈üekk√ºr ederim! Siz nasƒ±lsƒ±nƒ±z?',\n      '√áok iyiyim! VAULT MK8 sistemleri tam performansla √ßalƒ±≈üƒ±yor.',\n      'Harika! T√ºm agent\\'lar aktif ve hazƒ±r.'\n    ],\n    thanks: [\n      'Rica ederim! Ba≈üka bir ≈üey var mƒ±?',\n      'Ne demek! Her zaman yardƒ±ma hazƒ±rƒ±m.',\n      'Te≈üekk√ºr ederim! Ba≈üka bir konuda yardƒ±m ister misiniz?'\n    ],\n    goodbye: [\n      'G√∂r√º≈ü√ºr√ºz! ƒ∞yi g√ºnler!',\n      'Ho≈ü√ßa kalƒ±n! Tekrar bekleriz.',\n      'ƒ∞yi g√ºnler! Sistem her zaman hazƒ±r.'\n    ],\n    default: [\n      'Anladƒ±m! Size nasƒ±l yardƒ±mcƒ± olabilirim?',\n      'Tamam! Ba≈üka bir ≈üey var mƒ±?',\n      'Evet! Sistem hazƒ±r ve bekliyor.'\n    ]\n  },\n  english: {\n    greetings: [\n      'Hello! How can I help you?',\n      'Hi! Welcome to VAULT MK8 system!',\n      'Good morning! How can I assist you today?',\n      'Good day! System is ready and waiting.'\n    ],\n    how_are_you: [\n      'I\\'m fine, thank you! How are you?',\n      'Great! VAULT MK8 systems are running at full performance.',\n      'Excellent! All agents are active and ready.'\n    ],\n    thanks: [\n      'You\\'re welcome! Anything else?',\n      'No problem! I\\'m always ready to help.',\n      'Thank you! Need help with anything else?'\n    ],\n    goodbye: [\n      'Goodbye! Have a great day!',\n      'See you later! Come back anytime.',\n      'Have a good day! System is always ready.'\n    ],\n    default: [\n      'I understand! How can I help you?',\n      'Okay! Anything else?',\n      'Yes! System is ready and waiting.'\n    ]\n  }\n};\n\n// Determine response category\nfunction getResponseCategory(cmd, language) {\n  const lowerCmd = cmd.toLowerCase();\n  \n  if (language === 'turkish') {\n    if (lowerCmd.includes('selam') || lowerCmd.includes('merhaba') || lowerCmd.includes('g√ºnaydƒ±n')) {\n      return 'greetings';\n    } else if (lowerCmd.includes('nasƒ±lsƒ±n') || lowerCmd.includes('naber') || lowerCmd.includes('iyi misin')) {\n      return 'how_are_you';\n    } else if (lowerCmd.includes('te≈üekk√ºr') || lowerCmd.includes('saƒüol')) {\n      return 'thanks';\n    } else if (lowerCmd.includes('ho≈ü√ßa kal') || lowerCmd.includes('g√∂r√º≈ü√ºr√ºz') || lowerCmd.includes('iyi geceler')) {\n      return 'goodbye';\n    }\n  } else {\n    if (lowerCmd.includes('hello') || lowerCmd.includes('hi') || lowerCmd.includes('good morning')) {\n      return 'greetings';\n    } else if (lowerCmd.includes('how are you') || lowerCmd.includes('howdy')) {\n      return 'how_are_you';\n    } else if (lowerCmd.includes('thank') || lowerCmd.includes('thanks')) {\n      return 'thanks';\n    } else if (lowerCmd.includes('bye') || lowerCmd.includes('goodbye') || lowerCmd.includes('good night')) {\n      return 'goodbye';\n    }\n  }\n  \n  return 'default';\n}\n\n// Get random response\nfunction getRandomResponse(category, language) {\n  const responses = chitchatResponses[language][category];\n  return responses[Math.floor(Math.random() * responses.length)];\n}\n\nconst responseCategory = getResponseCategory(originalCommand, detectedLanguage);\nconst responseMessage = getRandomResponse(responseCategory, detectedLanguage);\n\nconst result = {\n  ...context,\n  agentType: 'chitchat',\n  status: 'completed',\n  execution: {\n    command: 'chitchat_response',\n    estimatedTime: '0-1 seconds',\n    requirements: ['none'],\n    safety: 'safe_conversation'\n  },\n  response: {\n    type: 'chitchat_response',\n    message: responseMessage,\n    data: {\n      category: responseCategory,\n      language: detectedLanguage,\n      originalCommand: originalCommand\n    }\n  }\n};\n\nconsole.log('VAULT MK8 - Chit-Chat Agent Response:', responseMessage);\nreturn [result];"
      },
      "id": "j0k1l2m3-0123-3456-7890-123456789012",
      "name": "üí¨ Chit-Chat Agent Executor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 700]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "j0k1l2m3-0123-3456-7890-123456789012",
      "name": "üîÑ Response Aggregator",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [900, 350]
    },
    {
      "parameters": {
        "jsCode": "// VAULT MK8 - Final Response Processor\nconst allData = $input.all();\nconst executionResult = allData[0]?.json;\n\nif (!executionResult) {\n  return [{\n    success: false,\n    error: 'No execution result received',\n    timestamp: new Date().toISOString()\n  }];\n}\n\n// Process execution result\nconst finalResponse = {\n  success: executionResult.status !== 'error' && executionResult.status !== 'blocked',\n  executionId: executionResult.executionId,\n  agent: executionResult.agentType,\n  command: executionResult.originalCommand,\n  language: executionResult.detectedLanguage,\n  confidence: executionResult.confidence,\n  status: executionResult.status,\n  \n  // Execution details\n  execution: {\n    estimatedTime: executionResult.execution?.estimatedTime,\n    requirements: executionResult.execution?.requirements,\n    safety: executionResult.execution?.safety\n  },\n  \n  // Response data\n  response: executionResult.response,\n  \n  // Metadata\n  metadata: {\n    ...executionResult.metadata,\n    processingCompleted: new Date().toISOString(),\n    totalProcessingTime: Date.now() - executionResult.metadata.processingTime + 'ms'\n  },\n  \n  // Context for follow-up commands\n  context: {\n    sessionId: executionResult.sessionId,\n    userId: executionResult.userId,\n    previousCommand: executionResult.originalCommand,\n    agentHistory: [executionResult.agentType]\n  }\n};\n\n// Log final result\nconsole.log('VAULT MK8 - Final Response:', {\n  agent: finalResponse.agent,\n  success: finalResponse.success,\n  processingTime: finalResponse.metadata.totalProcessingTime\n});\n\nreturn [finalResponse];"
      },
      "id": "k1l2m3n4-1234-4567-8901-234567890123",
      "name": "‚úÖ Final Response Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1120, 350]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin", 
                "value": "*"
              },
              {
                "name": "X-VAULT-Version",
                "value": "MK8"
              }
            ]
          }
        }
      },
      "id": "l2m3n4o5-2345-5678-9012-345678901234",
      "name": "üì§ Response Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 350]
    }
  ],
  "connections": {
    "üéØ Command Input Webhook": {
      "main": [
        [
          {
            "node": "üß† Intelligent Command Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Intelligent Command Analyzer": {
      "main": [
        [
          {
            "node": "üéØ Agent Router",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "üéØ Agent Router": {
      "main": [
        [
          {
            "node": "üåê Browser Agent Executor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚öôÔ∏è System Agent Executor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ü§ñ AI Agent Executor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìÅ File Agent Executor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üîó API Agent Executor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üóÑÔ∏è Database Agent (Placeholder)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üí¨ Chit-Chat Agent Executor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Browser Agent Executor": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è System Agent Executor": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ AI Agent Executor": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÅ File Agent Executor": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó API Agent Executor": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üóÑÔ∏è Database Agent (Placeholder)": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üí¨ Chit-Chat Agent Executor": {
      "main": [
        [
          {
            "node": "üîÑ Response Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Response Aggregator": {
      "main": [
        [
          {
            "node": "‚úÖ Final Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Final Response Processor": {
      "main": [
        [
          {
            "node": "üì§ Response Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "workflow_error_handler",
    "timezone": "Europe/Istanbul"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "vault-mk8",
      "name": "VAULT MK8"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "mk8-v1.0"
}